[gd_scene load_steps=5 format=3 uid="uid://c6mtwdh1lugis"]

[ext_resource type="Texture2D" uid="uid://bq1t8xabjm18t" path="res://Sprites/arrow.png" id="1_oup2u"]
[ext_resource type="Script" path="res://arrow.gd" id="2_yv7yu"]

[sub_resource type="Shader" id="Shader_7geke"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 50) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a <= 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_e61dj"]
shader = SubResource("Shader_7geke")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/width = 1.895
shader_parameter/pattern = 1
shader_parameter/inside = false
shader_parameter/add_margins = true

[node name="arrow" type="Sprite2D"]
modulate = Color(5.77569e-07, 0.777267, 0.399463, 1)
z_index = 4096
z_as_relative = false
material = SubResource("ShaderMaterial_e61dj")
position = Vector2(668, 310)
rotation = 0.71733
texture = ExtResource("1_oup2u")
offset = Vector2(-31, 0)
script = ExtResource("2_yv7yu")
